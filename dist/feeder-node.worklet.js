(()=>{"use strict";const t={UNINITIALIZED:1,READY:2,PLAYING:3,STARVED:4};Object.freeze(t);class e extends AudioWorkletProcessor{constructor(e){super(),this.port.onmessage=this._onMessage.bind(this),this.bufferThreshold,this.nChannels,this.state=t.UNINITIALIZED}process(e,s,a){return this._updateState(),this.state===t.PLAYING?this._buffer.read(128,s[0]):function(t){for(let e=0;e<t.length;e++){let s=t[e];for(let t=0;t<s.length;t++)s[t]=0}}(s[0]),!0}_updateState(){let e=this.state;switch(this.state){case t.UNINITIALIZED:return;case t.PLAYING:0===this._buffer.getNReadableSamples()&&(this.state=t.STARVED);break;case t.READY:case t.STARVED:this._buffer.getNReadableSamples()>=this.bufferThreshold&&(this.state=t.PLAYING)}e!=this.state&&this._notifyStateChange()}_notifyStateChange(){this.port.postMessage({command:"stateChange",state:this.state})}_onMessage(t){switch(t.data.command){case"init":this.nChannels=t.data.nChannels,this._init(t.data.bufferLength,t.data.nChannels,t.data.bufferThreshold);break;case"feed":this._feed(t.data.data);break;case"connect":t.ports[0].onmessage=this._onMessage.bind(this);break;default:throw Error("command not specified")}}_feed(t){let[e,s]=this._buffer.write(t);e&&this.port.postMessage({command:"bufferLengthChange",bufferLength:s})}_init(e,s,a){this._buffer=new class{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:32768,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;if(t<=0)throw"bufferLength must be >= 1";if(e<1)throw"nChannels must >= 1";this._data=new Float32Array(t*e),this._nChannels=e,this._readPos=0,this._writePos=0}get bufferLength(){return this._data.length/this._nChannels}getNReadableSamples(){if(this._readPos==this._writePos)return 0;let t;return t=this._readPos<this._writePos?this._writePos-this._readPos:this._data.length-this._readPos+this._writePos,t/this._nChannels}read(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=null===e?Array.apply(null,Array(this._nChannels)).map((()=>new Float32Array(t))):e,a=Math.min(t,this.getNReadableSamples()),h=this._readPos;for(let t=0;t<a;t++)for(let e=0;e<s.length;e++)h===this._data.length&&(h=0),s[e][t]=this._data[h++];return this._readPos=h,s}_resize(t){let e=this.getNReadableSamples()*this._nChannels,s=new Float32Array(t+e),a=this._readPos;for(let t=0;t<e;t++)s[t]=this._data[a++];this._writePos=e,this._readPos=0,this._data=s}write(t){if(!ArrayBuffer.isView(t))throw`Must submit a TypedArray. Received ${t.constructor.name}`;let e=!1;t.length>this._data.length&&(this._resize(t.length),e=!0);let s=this._writePos;for(let e=0;e<t.length;e++)s===this._data.length&&(s=0),this._data[s++]=t[e];return this._writePos=s,[e,this._data.length/this._nChannels]}}(e,s),this.bufferThreshold=a,this.state=t.READY,this._notifyStateChange()}}registerProcessor("FeederNode",e)})();